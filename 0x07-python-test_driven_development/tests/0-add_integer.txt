===============================
Using ``add_integer()`` function
=================================

This library is quite simple, since it has only one function called ``add_integer()``.

Numbers
========
```add_integer()`` returns the sum of arguments passed into it.
..
..
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 2)
	4
	>>> add_integer(2)
	100
	>>> add_integer(2, -2)
	0
	>>> add_integer(-2, 2)
	0

It also works with floating point numbers
..
..
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2.0, 2.0)
	4

	>>> add_integer(2.0, 2)
	4

	>>> add_integer(2, 2.0)
	4

	>>> add_integer(-2, 2.0)
	0

	>>> add_integer(2, -2.0)
	0

	>>> add_integer(1e308, 2)
	Traceback (most recent call last):
	...
	OverflowError: a or b too large

	>>> add_integer(2, 1e308)
	Traceback (most recent call last):
	...
	OverflowError: a or b too large

	>>> add_integer(1e5, 4)
	100004

Types other than int or float
===============================
```add_integer()``` should raise the appropriate error with a message

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, [1, "name", 1.0])
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	>>> add_integer([1, "name", 1.0], 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer({"Id" : 2, "name" : "Emmanuel"}, 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(2, {"Id" : 2, "name" : "Emmanuel"})
        Traceback (most recent call last):
        ...
        TypeError: b must be an integer

	>>> add_integer("Emmanuel", 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(2, "Emmanuel")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	>>> add_integer(None, None)
	Traceback (most recent call last):
	...
	TypeError: a and b must be integers

	>>> add_integer(True, 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	
	>>> add_integer(2, False)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(2, None)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
